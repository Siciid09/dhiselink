"use client";

import React, { useState, useEffect, createContext, useContext, useRef, FC, ReactNode } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
    LayoutDashboard, CheckSquare, FolderKanban, Users, MessageSquare, Bell, Settings,
    ChevronDown, ChevronRight, Search, Plus, MoreHorizontal, Calendar, Clock, Filter,
    Paperclip, Star, Trash2, Edit, LogOut, Sun, Moon, Laptop, GripVertical, X,
    ArrowUp, ArrowRight, ArrowDown, User, BarChart, PieChart, Activity
} from 'lucide-react';

// =================================================================================================
// 1. MOCK DATA
// Extensive data to simulate a real-world application.
// =================================================================================================

const MOCK_USERS = [
    { id: 'user-1', name: 'Aisha Jama', avatar: 'https://randomuser.me/api/portraits/women/68.jpg', role: 'Project Manager', online: true },
    { id: 'user-2', name: 'Omar Hassan', avatar: 'https://randomuser.me/api/portraits/men/32.jpg', role: 'Lead Developer', online: false },
    { id: 'user-3', name: 'Fatima Ali', avatar: 'https://randomuser.me/api/portraits/women/46.jpg', role: 'UX/UI Designer', online: true },
    { id: 'user-4', name: 'Yusuf Ahmed', avatar: 'https://randomuser.me/api/portraits/men/47.jpg', role: 'Frontend Developer', online: true },
    { id: 'user-5', name: 'Khadija Said', avatar: 'https://randomuser.me/api/portraits/women/50.jpg', role: 'Backend Developer', online: false },
    { id: 'user-6', name: 'Hassan Ibrahim', avatar: 'https://randomuser.me/api/portraits/men/51.jpg', role: 'QA Tester', online: true },
    { id: 'user-7', name: 'Samira Abdi', avatar: 'https://randomuser.me/api/portraits/women/52.jpg', role: 'DevOps Engineer', online: false },
];

const MOCK_PROJECTS = [
    {
        id: 'proj-1',
        title: 'E-commerce Platform Redevelopment',
        description: 'Complete overhaul of the existing online store to improve performance, UX, and scalability.',
        tags: ['React', 'Next.js', 'Vercel'],
        status: 'In Progress',
        progress: 75,
        dueDate: '2025-11-15',
        team: ['user-1', 'user-2', 'user-3', 'user-4', 'user-5'],
        isStarred: true,
    },
    {
        id: 'proj-2',
        title: 'Mobile Banking App',
        description: 'Native mobile application for iOS and Android for seamless banking on the go.',
        tags: ['React Native', 'Firebase', 'Stripe'],
        status: 'On Track',
        progress: 40,
        dueDate: '2026-01-20',
        team: ['user-1', 'user-2', 'user-4', 'user-6'],
        isStarred: false,
    },
    {
        id: 'proj-3',
        title: 'Internal CRM System',
        description: 'A new Customer Relationship Management tool for the sales and marketing teams.',
        tags: ['Vue.js', 'Node.js', 'PostgreSQL'],
        status: 'At Risk',
        progress: 20,
        dueDate: '2025-10-30',
        team: ['user-1', 'user-5', 'user-7'],
        isStarred: true,
    },
    {
        id: 'proj-4',
        title: 'Data Analytics Dashboard',
        description: 'Dashboard for visualizing key business metrics and KPIs in real-time.',
        tags: ['D3.js', 'Python', 'AWS'],
        status: 'Completed',
        progress: 100,
        dueDate: '2025-09-01',
        team: ['user-2', 'user-5'],
        isStarred: false,
    },
];

const MOCK_TASKS = {
    'todo': [
        { id: 'task-1', content: 'Design new login and signup flow', priority: 'High', assignee: 'user-3', project: 'proj-1' },
        { id: 'task-2', content: 'Set up CI/CD pipeline for mobile app', priority: 'Medium', assignee: 'user-7', project: 'proj-2' },
        { id: 'task-3', content: 'Database schema design for CRM', priority: 'High', assignee: 'user-5', project: 'proj-3' },
    ],
    'in-progress': [
        { id: 'task-4', content: 'Develop product detail page components', priority: 'High', assignee: 'user-4', project: 'proj-1' },
        { id: 'task-5', content: 'Integrate payment gateway API', priority: 'Medium', assignee: 'user-2', project: 'proj-2' },
    ],
    'in-review': [
        { id: 'task-6', content: 'User authentication service', priority: 'High', assignee: 'user-5', project: 'proj-1' },
    ],
    'done': [
        { id: 'task-7', content: 'Initial project setup and configuration', priority: 'Low', assignee: 'user-2', project: 'proj-1' },
        { id: 'task-8', content: 'Create wireframes for main dashboard', priority: 'Medium', assignee: 'user-3', project: 'proj-2' },
        { id: 'task-9', content: 'API documentation for analytics endpoints', priority: 'Low', assignee: 'user-5', project: 'proj-4' },
    ],
};

const MOCK_NOTIFICATIONS = [
    { id: 1, type: 'comment', text: 'Omar Hassan commented on your task "Design new login flow".', time: '5m ago', read: false, user: 'user-2' },
    { id: 2, type: 'mention', text: 'Fatima Ali mentioned you in the project "Mobile Banking App".', time: '1h ago', read: false, user: 'user-3' },
    { id: 3, type: 'deadline', text: 'Task "Database schema design" is due tomorrow.', time: '8h ago', read: true },
    { id: 4, type: 'system', text: 'The "E-commerce Platform" project status was changed to "In Progress".', time: '2d ago', read: true },
];

const MOCK_ACTIVITY_FEED = [
    { id: 1, user: 'user-4', action: 'completed the task', subject: 'Develop product detail page', project: 'proj-1', time: '10m ago' },
    { id: 2, user: 'user-1', action: 'added a new project', subject: 'Marketing Website Redesign', project: null, time: '45m ago' },
    { id: 3, user: 'user-5', action: 'pushed a new commit to', subject: 'crm-backend:feat/user-auth', project: 'proj-3', time: '2h ago' },
    { id: 4, user: 'user-3', action: 'uploaded new mockups for', subject: 'Mobile App Onboarding', project: 'proj-2', time: '5h ago' },
    { id: 5, user: 'user-6', action: 'reported a bug in', subject: 'E-commerce Checkout', project: 'proj-1', time: '1d ago' },
];


// =================================================================================================
// 2. UTILITY FUNCTIONS & CONTEXT
// Helpers for classnames, dates, and global state management.
// =================================================================================================

// Simple classname utility
const cn = (...classes: (string | boolean | undefined)[]) => classes.filter(Boolean).join(' ');

// Date formatting utility
const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        year: 'numeric',
    });
};

// Theme context for light/dark mode
type Theme = 'light' | 'dark' | 'system';
const ThemeContext = createContext<{ theme: Theme; setTheme: (theme: Theme) => void } | null>(null);

const useTheme = () => {
    const context = useContext(ThemeContext);
    if (!context) throw new Error("useTheme must be used within a ThemeProvider");
    return context;
};

const ThemeProvider = ({ children }: { children: ReactNode }) => {
    const [theme, setThemeState] = useState<Theme>('system');

    useEffect(() => {
        const storedTheme = localStorage.getItem('theme') as Theme | null;
        if (storedTheme) {
            setThemeState(storedTheme);
        }
    }, []);

    const applyTheme = (theme: Theme) => {
        const root = window.document.documentElement;
        root.classList.remove('light', 'dark');
        let effectiveTheme = theme;
        if (theme === 'system') {
            effectiveTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        }
        root.classList.add(effectiveTheme);
    };

    const setTheme = (newTheme: Theme) => {
        localStorage.setItem('theme', newTheme);
        setThemeState(newTheme);
        applyTheme(newTheme);
    };
    
    useEffect(() => {
        applyTheme(theme);
        const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
        const handleChange = () => applyTheme(theme);
        mediaQuery.addEventListener('change', handleChange);
        return () => mediaQuery.removeEventListener('change', handleChange);
    }, [theme]);

    return (
        <ThemeContext.Provider value={{ theme, setTheme }}>
            {children}
        </ThemeContext.Provider>
    );
};


// =================================================================================================
// 3. CORE UI COMPONENT LIBRARY
// Reusable, generic components that form the building blocks of the UI.
// =================================================================================================

const Card: FC<{ children: ReactNode; className?: string }> = ({ children, className }) => (
    <div className={cn("bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-sm", className)}>
        {children}
    </div>
);

const CardHeader: FC<{ children: ReactNode; className?: string }> = ({ children, className }) => (
    <div className={cn("p-4 border-b border-gray-200 dark:border-gray-700", className)}>
        {children}
    </div>
);

const CardTitle: FC<{ children: ReactNode; className?: string }> = ({ children, className }) => (
    <h3 className={cn("text-lg font-semibold text-gray-900 dark:text-white", className)}>
        {children}
    </h3>
);

const CardContent: FC<{ children: ReactNode; className?: string }> = ({ children, className }) => (
    <div className={cn("p-4", className)}>
        {children}
    </div>
);

const Button: FC<{ children: ReactNode; onClick?: () => void; variant?: 'primary' | 'secondary' | 'ghost'; size?: 'sm' | 'md' | 'lg'; className?: string; }> = ({ children, onClick, variant = 'primary', size = 'md', className }) => {
    const baseClasses = "inline-flex items-center justify-center gap-2 font-semibold rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-900";
    const variantClasses = {
        primary: "bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500",
        secondary: "bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-600 focus:ring-gray-400",
        ghost: "bg-transparent text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 focus:ring-gray-400",
    };
    const sizeClasses = {
        sm: "px-3 py-1.5 text-sm",
        md: "px-4 py-2 text-base",
        lg: "px-6 py-3 text-lg",
    };
    return (
        <button onClick={onClick} className={cn(baseClasses, variantClasses[variant], sizeClasses[size], className)}>
            {children}
        </button>
    );
};

const Avatar: FC<{ src: string; alt: string; size?: 'sm' | 'md' | 'lg'; className?: string; online?: boolean }> = ({ src, alt, size = 'md', className, online }) => {
    const sizeClasses = { sm: 'w-8 h-8', md: 'w-10 h-10', lg: 'w-14 h-14' };
    return (
        <div className={cn('relative flex-shrink-0', className)}>
            <img className={cn('rounded-full object-cover', sizeClasses[size])} src={src} alt={alt} />
            {online !== undefined && (
                <span className={cn(
                    'absolute bottom-0 right-0 block h-2.5 w-2.5 rounded-full ring-2 ring-white dark:ring-gray-800',
                    online ? 'bg-green-500' : 'bg-gray-400'
                )}></span>
            )}
        </div>
    );
};

const AvatarGroup: FC<{ userIds: string[]; max?: number }> = ({ userIds, max = 3 }) => {
    const visibleUsers = userIds.slice(0, max).map(id => MOCK_USERS.find(u => u.id === id));
    const hiddenCount = userIds.length - max;
    return (
        <div className="flex -space-x-2">
            {visibleUsers.map(user => user && <Avatar key={user.id} src={user.avatar} alt={user.name} size="sm" className="ring-2 ring-white dark:ring-gray-800" />)}
            {hiddenCount > 0 && (
                <div className="w-8 h-8 rounded-full bg-gray-200 dark:bg-gray-600 flex items-center justify-center text-xs font-bold text-gray-600 dark:text-gray-300 ring-2 ring-white dark:ring-gray-800">
                    +{hiddenCount}
                </div>
            )}
        </div>
    );
};

const Badge: FC<{ children: ReactNode; color?: 'blue' | 'green' | 'red' | 'yellow' | 'gray'; className?: string }> = ({ children, color = 'gray', className }) => {
    const colorClasses = {
        blue: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',
        green: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',
        red: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',
        yellow: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',
        gray: 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200',
    };
    return (
        <span className={cn('px-2.5 py-0.5 text-xs font-medium rounded-full', colorClasses[color], className)}>
            {children}
        </span>
    );
};

const ProgressBar: FC<{ progress: number; className?: string }> = ({ progress, className }) => {
    let colorClass = 'bg-blue-600';
    if (progress < 30) colorClass = 'bg-red-600';
    else if (progress < 70) colorClass = 'bg-yellow-500';
    else if (progress === 100) colorClass = 'bg-green-600';
    
    return (
        <div className={cn("w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2", className)}>
            <motion.div
                className={cn("h-2 rounded-full", colorClass)}
                initial={{ width: 0 }}
                animate={{ width: `${progress}%` }}
                transition={{ duration: 0.8, ease: "easeInOut" }}
            />
        </div>
    );
};

// =================================================================================================
// 4. LAYOUT COMPONENTS
// Components that define the main structure of the application, like Sidebar and Header.
// =================================================================================================

const Sidebar: FC<{ onNavigate: (view: string) => void; currentView: string; collapsed: boolean; setCollapsed: (c: boolean) => void }> = ({ onNavigate, currentView, collapsed, setCollapsed }) => {
    const navItems = [
        { id: 'dashboard', icon: LayoutDashboard, label: 'Dashboard' },
        { id: 'projects', icon: FolderKanban, label: 'Projects' },
        { id: 'tasks', icon: CheckSquare, label: 'My Tasks' },
        { id: 'team', icon: Users, label: 'Team' },
        { id: 'messages', icon: MessageSquare, label: 'Messages' },
    ];

    return (
        <motion.aside
            animate={{ width: collapsed ? 80 : 256 }}
            transition={{ duration: 0.3, ease: "easeInOut" }}
            className="hidden md:flex flex-col bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 h-screen sticky top-0"
        >
            <div className="flex items-center justify-between h-16 border-b border-gray-200 dark:border-gray-700 px-4">
                <AnimatePresence>
                    {!collapsed && (
                        <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} transition={{ duration: 0.2 }}>
                            <h1 className="text-xl font-bold text-gray-900 dark:text-white">Zenith</h1>
                        </motion.div>
                    )}
                </AnimatePresence>
                 <button onClick={() => setCollapsed(!collapsed)} className="p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700">
                    <GripVertical className="h-5 w-5 text-gray-500 dark:text-gray-400" />
                </button>
            </div>
            <nav className="flex-1 py-4 px-2 space-y-1">
                {navItems.map(item => (
                    <a
                        key={item.id}
                        href="#"
                        onClick={(e) => { e.preventDefault(); onNavigate(item.id); }}
                        className={cn(
                            "flex items-center p-3 rounded-lg transition-colors",
                            currentView === item.id
                                ? "bg-blue-50 dark:bg-blue-900/50 text-blue-600 dark:text-blue-300"
                                : "text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700",
                            collapsed && "justify-center"
                        )}
                    >
                        <item.icon className="h-5 w-5 flex-shrink-0" />
                        <AnimatePresence>
                            {!collapsed && (
                                <motion.span
                                    initial={{ opacity: 0, width: 0 }}
                                    animate={{ opacity: 1, width: 'auto', marginLeft: '12px' }}
                                    exit={{ opacity: 0, width: 0, marginLeft: 0 }}
                                    transition={{ duration: 0.2 }}
                                    className="overflow-hidden whitespace-nowrap"
                                >
                                    {item.label}
                                </motion.span>
                            )}
                        </AnimatePresence>
                    </a>
                ))}
            </nav>
            <div className="p-2 border-t border-gray-200 dark:border-gray-700">
                <a
                    href="#"
                    onClick={(e) => { e.preventDefault(); onNavigate('settings'); }}
                    className={cn(
                        "flex items-center p-3 rounded-lg transition-colors",
                        currentView === 'settings'
                            ? "bg-blue-50 dark:bg-blue-900/50 text-blue-600 dark:text-blue-300"
                            : "text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700",
                        collapsed && "justify-center"
                    )}
                >
                    <Settings className="h-5 w-5 flex-shrink-0" />
                     <AnimatePresence>
                        {!collapsed && (
                            <motion.span
                                initial={{ opacity: 0, width: 0 }}
                                animate={{ opacity: 1, width: 'auto', marginLeft: '12px' }}
                                exit={{ opacity: 0, width: 0, marginLeft: 0 }}
                                transition={{ duration: 0.2 }}
                                className="overflow-hidden whitespace-nowrap"
                            >
                                Settings
                            </motion.span>
                        )}
                    </AnimatePresence>
                </a>
            </div>
        </motion.aside>
    );
};

const Header: FC<{ onNavigate: (view: string) => void }> = ({ onNavigate }) => {
    const { theme, setTheme } = useTheme();
    const [userMenuOpen, setUserMenuOpen] = useState(false);
    const [notificationsOpen, setNotificationsOpen] = useState(false);
    const user = MOCK_USERS[0];

    const menuRef = useRef<HTMLDivElement>(null);
    const notificationsRef = useRef<HTMLDivElement>(null);

    // Close dropdowns when clicking outside
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
                setUserMenuOpen(false);
            }
            if (notificationsRef.current && !notificationsRef.current.contains(event.target as Node)) {
                setNotificationsOpen(false);
            }
        };
        document.addEventListener("mousedown", handleClickOutside);
        return () => document.removeEventListener("mousedown", handleClickOutside);
    }, []);

    return (
        <header className="flex items-center justify-between h-16 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-6 sticky top-0 z-30">
            {/* Search Bar */}
            <div className="flex-1 max-w-md">
                <div className="relative">
                    <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                    <input
                        type="text"
                        placeholder="Search projects, tasks..."
                        className="w-full pl-10 pr-4 py-2 bg-gray-100 dark:bg-gray-700 border border-transparent rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                </div>
            </div>

            {/* Header Actions */}
            <div className="flex items-center gap-4">
                 {/* Theme Toggle */}
                <div className="flex items-center gap-1 p-1 bg-gray-100 dark:bg-gray-700 rounded-lg">
                    <button onClick={() => setTheme('light')} className={cn('p-1.5 rounded-md', theme === 'light' && 'bg-white dark:bg-gray-600')}><Sun size={18} /></button>
                    <button onClick={() => setTheme('dark')} className={cn('p-1.5 rounded-md', theme === 'dark' && 'bg-white dark:bg-gray-600')}><Moon size={18} /></button>
                    <button onClick={() => setTheme('system')} className={cn('p-1.5 rounded-md', theme === 'system' && 'bg-white dark:bg-gray-600')}><Laptop size={18} /></button>
                </div>

                {/* Notifications */}
                <div className="relative" ref={notificationsRef}>
                    <button onClick={() => setNotificationsOpen(!notificationsOpen)} className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700">
                        <Bell className="h-6 w-6 text-gray-600 dark:text-gray-300" />
                        <span className="absolute top-1 right-1 flex h-2 w-2">
                          <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>
                          <span className="relative inline-flex rounded-full h-2 w-2 bg-red-500"></span>
                        </span>
                    </button>
                    <AnimatePresence>
                        {notificationsOpen && (
                            <motion.div
                                initial={{ opacity: 0, y: 10 }}
                                animate={{ opacity: 1, y: 0 }}
                                exit={{ opacity: 0, y: 10 }}
                                className="absolute right-0 mt-2 w-80 bg-white dark:bg-gray-800 border dark:border-gray-700 rounded-lg shadow-xl"
                            >
                               <div className="p-3 border-b dark:border-gray-700">
                                   <h4 className="font-semibold">Notifications</h4>
                               </div>
                               <div className="py-1 max-h-80 overflow-y-auto">
                                   {MOCK_NOTIFICATIONS.map(n => (
                                        <div key={n.id} className={cn("px-3 py-2 flex gap-3 items-start hover:bg-gray-50 dark:hover:bg-gray-700", !n.read && "bg-blue-50 dark:bg-blue-900/40")}>
                                            <div className="flex-shrink-0 mt-1">
                                                {n.user ? <Avatar src={MOCK_USERS.find(u => u.id === n.user)!.avatar} alt="" size="sm" /> : <div className="w-8 h-8 rounded-full bg-gray-200 dark:bg-gray-600" />}
                                            </div>
                                            <div>
                                               <p className="text-sm text-gray-700 dark:text-gray-300">{n.text}</p>
                                               <p className="text-xs text-gray-400">{n.time}</p>
                                            </div>
                                            {!n.read && <div className="mt-1 w-2 h-2 rounded-full bg-blue-500 flex-shrink-0"></div>}
                                        </div>
                                   ))}
                               </div>
                            </motion.div>
                        )}
                    </AnimatePresence>
                </div>
               
                {/* User Menu */}
                <div className="relative" ref={menuRef}>
                    <button onClick={() => setUserMenuOpen(!userMenuOpen)} className="flex items-center gap-2">
                        <Avatar src={user.avatar} alt={user.name} size="md" />
                        <div className="hidden lg:block text-left">
                            <p className="font-semibold text-sm text-gray-900 dark:text-white">{user.name}</p>
                            <p className="text-xs text-gray-500 dark:text-gray-400">{user.role}</p>
                        </div>
                        <ChevronDown className={cn("h-4 w-4 text-gray-500 transition-transform", userMenuOpen && "rotate-180")} />
                    </button>
                    <AnimatePresence>
                        {userMenuOpen && (
                            <motion.div
                                initial={{ opacity: 0, y: 10 }}
                                animate={{ opacity: 1, y: 0 }}
                                exit={{ opacity: 0, y: 10 }}
                                className="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 border dark:border-gray-700 rounded-lg shadow-xl py-1"
                            >
                                <a href="#" className="flex items-center gap-2 px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"><User size={16}/> Profile</a>
                                <a href="#" onClick={(e) => { e.preventDefault(); onNavigate('settings'); setUserMenuOpen(false); }} className="flex items-center gap-2 px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"><Settings size={16}/> Settings</a>
                                <hr className="my-1 border-gray-200 dark:border-gray-700" />
                                <a href="#" className="flex items-center gap-2 px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/50"><LogOut size={16}/> Logout</a>
                            </motion.div>
                        )}
                    </AnimatePresence>
                </div>
            </div>
        </header>
    );
};

// =================================================================================================
// 5. VIEW/PAGE COMPONENTS
// These components represent the different "pages" of the application.
// =================================================================================================

const DashboardView: FC = () => {
    const statCards = [
        { title: 'Active Projects', value: MOCK_PROJECTS.filter(p => p.status !== 'Completed').length, icon: FolderKanban, trend: 2 },
        { title: 'Tasks Completed', value: 84, icon: CheckSquare, trend: 15 },
        { title: 'Team Members', value: MOCK_USERS.length, icon: Users, trend: 0 },
        { title: 'Productivity', value: '92%', icon: BarChart, trend: -3 },
    ];
    
    return (
        <div className="p-6 space-y-6">
            <motion.h1 initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="text-3xl font-bold text-gray-900 dark:text-white">
                Welcome back, {MOCK_USERS[0].name.split(' ')[0]}!
            </motion.h1>

            {/* Stat Cards */}
            <motion.div
                className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6"
                variants={{ visible: { transition: { staggerChildren: 0.1 } } }}
                initial="hidden"
                animate="visible"
            >
                {statCards.map((card, i) => (
                    <motion.div key={i} variants={{ hidden: { opacity: 0, y: 20 }, visible: { opacity: 1, y: 0 } }}>
                        <Card>
                            <CardHeader className="flex justify-between items-center">
                                <CardTitle className="text-base">{card.title}</CardTitle>
                                <card.icon className="h-5 w-5 text-gray-400" />
                            </CardHeader>
                            <CardContent>
                                <p className="text-3xl font-bold text-gray-900 dark:text-white">{card.value}</p>
                                <div className="flex items-center text-sm mt-1">
                                    {card.trend > 0 ? <ArrowUp size={16} className="text-green-500" /> : <ArrowDown size={16} className="text-red-500" />}
                                    <span className={cn(card.trend > 0 ? 'text-green-600' : 'text-red-600', 'font-semibold')}>{Math.abs(card.trend)}%</span>
                                    <span className="text-gray-500 ml-1">vs last month</span>
                                </div>
                            </CardContent>
                        </Card>
                    </motion.div>
                ))}
            </motion.div>

            {/* Main Dashboard Grid */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* My Tasks */}
                <Card className="lg:col-span-2">
                    <CardHeader><CardTitle>My Open Tasks</CardTitle></CardHeader>
                    <CardContent>
                        <div className="space-y-3">
                            {Object.values(MOCK_TASKS).flat().slice(0, 5).map(task => (
                                <div key={task.id} className="flex items-center justify-between p-2 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700/50">
                                    <div className="flex items-center gap-3">
                                        <button className="w-5 h-5 border-2 border-gray-300 dark:border-gray-600 rounded-full flex-shrink-0"></button>
                                        <p className="text-gray-800 dark:text-gray-200">{task.content}</p>
                                    </div>
                                    <div className="flex items-center gap-3">
                                        <Badge color={task.priority === 'High' ? 'red' : task.priority === 'Medium' ? 'yellow' : 'gray'}>{task.priority}</Badge>
                                        <Avatar src={MOCK_USERS.find(u => u.id === task.assignee)!.avatar} alt="" size="sm" />
                                    </div>
                                </div>
                            ))}
                        </div>
                    </CardContent>
                </Card>

                {/* Recent Activity */}
                <Card>
                    <CardHeader><CardTitle>Recent Activity</CardTitle></CardHeader>
                    <CardContent>
                        <ul className="space-y-4">
                            {MOCK_ACTIVITY_FEED.map(activity => (
                                <li key={activity.id} className="flex gap-3">
                                    <Avatar src={MOCK_USERS.find(u => u.id === activity.user)!.avatar} alt="" size="sm" />
                                    <div>
                                        <p className="text-sm text-gray-800 dark:text-gray-200">
                                            <span className="font-semibold">{MOCK_USERS.find(u => u.id === activity.user)!.name}</span> {activity.action} <span className="font-semibold text-blue-600 dark:text-blue-400">{activity.subject}</span>
                                        </p>
                                        <p className="text-xs text-gray-500">{activity.time}</p>
                                    </div>
                                </li>
                            ))}
                        </ul>
                    </CardContent>
                </Card>
            </div>
        </div>
    );
};

const ProjectsView: FC = () => {
    return (
        <div className="p-6">
             <motion.h1 initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="text-3xl font-bold text-gray-900 dark:text-white mb-6">
                Projects
            </motion.h1>
             <motion.div
                className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
                variants={{ visible: { transition: { staggerChildren: 0.07 } } }}
                initial="hidden"
                animate="visible"
            >
                {MOCK_PROJECTS.map(proj => (
                    <motion.div key={proj.id} variants={{ hidden: { opacity: 0, y: 20 }, visible: { opacity: 1, y: 0 } }}>
                        <Card className="flex flex-col h-full">
                           <CardHeader>
                                <div className="flex justify-between items-start">
                                    <CardTitle>{proj.title}</CardTitle>
                                    <button>{proj.isStarred ? <Star size={18} className="text-yellow-400 fill-current" /> : <Star size={18} className="text-gray-400" />}</button>
                                </div>
                                <div className="flex gap-2 mt-2">
                                    {proj.tags.map(tag => <Badge key={tag}>{tag}</Badge>)}
                                </div>
                           </CardHeader>
                           <CardContent className="flex-grow">
                                <p className="text-sm text-gray-600 dark:text-gray-300">{proj.description}</p>
                           </CardContent>
                           <div className="p-4 space-y-3">
                                <div className="flex justify-between items-center text-sm">
                                    <p className="text-gray-500 dark:text-gray-400">Progress</p>
                                    <p className="font-semibold text-gray-700 dark:text-gray-200">{proj.progress}%</p>
                                </div>
                                <ProgressBar progress={proj.progress} />
                                <div className="flex justify-between items-center pt-2">
                                    <AvatarGroup userIds={proj.team} />
                                    <div className="flex items-center gap-1 text-sm text-gray-500 dark:text-gray-400">
                                        <Calendar size={14}/>
                                        <span>{formatDate(proj.dueDate)}</span>
                                    </div>
                                </div>
                           </div>
                        </Card>
                    </motion.div>
                ))}
            </motion.div>
        </div>
    );
};

const TasksView: FC = () => {
    const [tasks, setTasks] = useState(MOCK_TASKS);
    
    const columns = [
        { id: 'todo', title: 'To Do' },
        { id: 'in-progress', title: 'In Progress' },
        { id: 'in-review', title: 'In Review' },
        { id: 'done', title: 'Done' },
    ];

    return (
        <div className="p-6 h-full flex flex-col">
            <motion.h1 initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="text-3xl font-bold text-gray-900 dark:text-white mb-6">
                My Tasks
            </motion.h1>
            <div className="flex-grow grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                {columns.map(col => (
                    <div key={col.id} className="bg-gray-100 dark:bg-gray-900/50 rounded-lg flex flex-col">
                        <div className="p-3 border-b-2 border-gray-200 dark:border-gray-700">
                            <h3 className="font-semibold text-gray-800 dark:text-gray-200">{col.title} <Badge>{tasks[col.id as keyof typeof tasks].length}</Badge></h3>
                        </div>
                        <div className="p-3 space-y-3 overflow-y-auto">
                            {tasks[col.id as keyof typeof tasks].map(task => (
                                <Card key={task.id} className="p-3">
                                    <p className="font-medium text-gray-900 dark:text-white mb-2">{task.content}</p>
                                    <div className="flex justify-between items-center">
                                        <Badge color={task.priority === 'High' ? 'red' : task.priority === 'Medium' ? 'yellow' : 'gray'}>{task.priority}</Badge>
                                        <Avatar src={MOCK_USERS.find(u => u.id === task.assignee)!.avatar} alt="" size="sm" />
                                    </div>
                                </Card>
                            ))}
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

// ... Add more views like TeamView, SettingsView if needed to expand further.

// =================================================================================================
// 6. MAIN APPLICATION COMPONENT
// The root component that ties everything together.
// =================================================================================================

const AppLayout = () => {
    const [currentView, setCurrentView] = useState('dashboard');
    const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
    
    const renderView = () => {
        switch(currentView) {
            case 'dashboard': return <DashboardView />;
            case 'projects': return <ProjectsView />;
            case 'tasks': return <TasksView />;
            // Add other cases here
            default: return <DashboardView />;
        }
    };
    
    return (
        <div className="flex bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 min-h-screen">
            <Sidebar onNavigate={setCurrentView} currentView={currentView} collapsed={sidebarCollapsed} setCollapsed={setSidebarCollapsed} />
            <div className="flex-1 flex flex-col">
                <Header onNavigate={setCurrentView} />
                <main className="flex-1 overflow-y-auto">
                    <AnimatePresence mode="wait">
                        <motion.div
                            key={currentView}
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            exit={{ opacity: 0, y: -20 }}
                            transition={{ duration: 0.3 }}
                        >
                            {renderView()}
                        </motion.div>
                    </AnimatePresence>
                </main>
            </div>
        </div>
    );
}


export default function ProjectManagementDashboard() {
    return (
        <ThemeProvider>
            <AppLayout />
        </ThemeProvider>
    );
}